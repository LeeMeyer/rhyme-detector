{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["exports.default = function(message) {\r\n\r\n    const noiseWords = ['the', 'a', 'an'];\r\n    \r\n    let rhymeGroups = {};\r\n    let scores = [];\r\n\r\n    let words = message.replace(/[^\\w\\s\\']|[\\s]|_/g, \" \").split(' '); \r\n\r\n    for (let word of words)\r\n    {\r\n        if (word.length > 1 && noiseWords.indexOf(word.toLowerCase()) === -1)\r\n        {\r\n            let phonemes = cmuDictionary[word.toLowerCase()];\r\n\r\n            if (phonemes) {\r\n\r\n                let santizedPhonemes = \r\n                        phonemes\r\n                            .replace(/\\d/g,'')\r\n                            .replace(/UW R$/, 'AO')\r\n                            .replace(/UH R$/, 'AO')\r\n                            .replace(/AO R$/, 'AO')\r\n                            .replace(/EH L/, 'AH L')\r\n\r\n                let phonemesArray = santizedPhonemes.split(' ')\r\n\r\n                let lastVowelIndex = 0\r\n                let secondLastVowelIndex\r\n                let vowelsCount = 0\r\n        \r\n                for (let j = 0; j < phonemesArray.length; j++)\r\n                {\r\n                    if (phonemesArray[j].match(/^[AEIOU]/i))\r\n                    {\r\n                        secondLastVowelIndex = lastVowelIndex\r\n                        lastVowelIndex = j\r\n                        vowelsCount++\r\n                    }\r\n                }\r\n        \r\n                let endPhonemesArray = phonemesArray.slice(vowelsCount > 1 && secondLastVowelIndex > 0 ? secondLastVowelIndex : lastVowelIndex)\r\n                let endPhoneme = endPhonemesArray.join(' ')\r\n            \r\n                for (let key in rhymeGroups)\r\n                {\r\n                    if (endPhoneme.endsWith(key) || key.endsWith(endPhoneme)) {\r\n                        endPhoneme = key\r\n                    }\r\n                }\r\n\r\n                if (!rhymeGroups[endPhoneme])\r\n                {\r\n                    rhymeGroups[endPhoneme] = []\r\n                }\r\n        \r\n                if (rhymeGroups[endPhoneme].indexOf(word.toLowerCase()) < 0)\r\n                {\r\n                    let rhymeGroup = rhymeGroups[endPhoneme]\r\n                    rhymeGroups[endPhoneme].push(word.toLowerCase())\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    for (let key in rhymeGroups) {\r\n        if (rhymeGroups[key].length < 2) {\r\n            delete rhymeGroups[key];\r\n        }\r\n    }\r\n\r\n    return rhymeGroups;\r\n}"],"names":["exports","message","noiseWords","rhymeGroups","replace","split","word","length","indexOf","toLowerCase","phonemes","cmuDictionary","phonemesArray","lastVowelIndex","secondLastVowelIndex","vowelsCount","j","match","endPhoneme","slice","join","key","endsWith","push"],"mappings":"0GAAAA,gBAAkB,SAASC,GASvB,IAPA,MAAMC,EAAa,CAAC,MAAO,IAAK,MAE5BC,EAAc,wrBAGNF,EAAQG,QAAQ,oBAAqB,KAAKC,MAAM,qBAG5D,KADSC,UAEL,GAAIA,EAAKC,OAAS,IAAiD,IAA5CL,EAAWM,QAAQF,EAAKG,eAC/C,CACI,IAAIC,EAAWC,cAAcL,EAAKG,eAElC,GAAIC,EAAU,CAgBV,IAdA,IAQIE,EAPIF,EACKN,QAAQ,MAAM,IACdA,QAAQ,QAAS,MACjBA,QAAQ,QAAS,MACjBA,QAAQ,QAAS,MACjBA,QAAQ,OAAQ,QAEQC,MAAM,KAEvCQ,EAAiB,EACjBC,SACAC,EAAc,EAETC,EAAI,EAAGA,EAAIJ,EAAcL,OAAQS,IAElCJ,EAAcI,GAAGC,MAAM,eAEvBH,EAAuBD,EACvBA,EAAiBG,EACjBD,KAIR,IACIG,EADmBN,EAAcO,MAAMJ,EAAc,GAAKD,EAAuB,EAAIA,EAAuBD,GAC9EO,KAAK,KAEvC,IAAK,IAAIC,KAAOlB,GAERe,EAAWI,SAASD,IAAQA,EAAIC,SAASJ,MACzCA,EAAaG,GAIhBlB,EAAYe,KAEbf,EAAYe,GAAc,IAG1Bf,EAAYe,GAAYV,QAAQF,EAAKG,eAAiB,GAGtDN,EAAYe,GAAYK,KAAKjB,EAAKG,iBAOlD,IAAK,IAAIY,KAAOlB,EACRA,EAAYkB,GAAKd,OAAS,UACnBJ,EAAYkB,GAI3B,OAAOlB"}